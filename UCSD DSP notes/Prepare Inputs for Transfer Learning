## Set training set 
# Assignment1: What options can you set to control network training? You can see the available options for a chosen training algorithm by using the trainingOptions function.

This command creates a variable called opts that contains the default options for the specified training algorithm.
opts = trainingOptions("algorithm")

To use stochastic gradient descent with momentum (SGDM), specify "sgdm".
任务
Create a variable called opts with the default training algorithm options for the SGDM optimizer. Omit the semicolon at the end of the line to display the result.
opts = trainingOptions("sgdm")

## Assignment 2: You can specify any number of settings as optional name-value arguments in the trainingOptions function.
opts = trainingOptions("sgdm",Name=value)
任务
Update the variable called opts to set InitialLearnRate to 0.001.
opts = trainingOptions("sgdm",InitialLearnRate=0.001)

## Assignment3: By default, you'll monitor the loss value during training to see how the network is learning. You can add additional metrics with the Metrics name-value argument. For classification problems, it's common to monitor both loss and accuracy.
opts = trainingOptions(...,Metrics="accuracy")
任务
Update the variable called opts to set Metrics to "accuracy".
opts = trainingOptions("sgdm",InitialLearnRate=0.001,Metrics="accuracy")

# Evaluate the test performance: 
To see how your network performs on the test images, you can use the testnet function. You can calculate a variety of metrics, like accuracy.
m = testnet(net,data,"accuracy")
The second input data can be a datastore.
任务
Calculate the testing accuracy of the trained network flowernet on the testing datastore resizeTestImgs. Store the result in a variable called a.
a = testnet(flowernet,resizeTestImgs,"accuracy")

# Assignment2: To investigate the misclassifications, you can get the correct labels from the test images. The known classifications are stored in the Labels property of the datastore.
knownClass = imds.Labels
任务
Store the known classifications of the test images in a variable called flwrActual by extracting the Labels property of the testImgs datastore.
flwrActual = testImgs.Labels

# Assignment3: The confusionchart function calculates and displays the confusion matrix for the predicted classifications.
confusionchart(knownclass,predictedclass)
The (j,k) element of the confusion matrix is a count of how many images from class j the network predicts to be in class k. 
Diagonal elements represent correct classifications and off-diagonal elements represent misclassifications.
任务
Display the confusion matrix for the flower test data. The known classifications are stored in your solution for Task 2 (flwrActual). 
The predicted classifications are stored in the flwrPreds categorical array.

confusionchart(flwrActual,flwrPreds)


