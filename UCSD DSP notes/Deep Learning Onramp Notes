# Assignment You can use the imread function to import images stored in most standard file formats, such as GIF, JPEG, and PNG.

This command reads the specified image and stores it in a MATLAB variable called I.
I = imread("filename.png");
任务
Import the JPG file file01 into the MATLAB workspace. Store the image in a variable called img1.

img1 = imread('file01.jpg')

# Assignment2 You can use the imshow function to display an image that is stored in a MATLAB variable:
imshow(I)
任务
Display the imported image in the img1 variable.

imshow(img1)

# Assignment3 You can create a copy of a pretrained deep network using the imagePretrainedNetwork function.
net = imagePretrainedNetwork
By default, the function provides a deep network named “SqueezeNet.” This network was trained on a data set called ImageNet, which contains 1000 classes, or categories.
任务
Use the imagePretrainedNetwork function to load a pretrained network. Save the result as a variable called net.

net = imagePretrainedNetwork

# Assignment4 You can use the minibatchpredict function to predict the subject of an image. The result is a vector of prediction scores, one for each class that the network net can predict.
scores = minibatchpredict(net,img)
The term "mini-batch" is in the function name because this function can also predict the contents of multiple images. You'll learn more about this term later in the course.
任务Use the minibatchpredict function with the pretrained network net to predict the subject of the image stored in the img1 variable. 
Store the network's prediction in a variable called s.
To see the result, don't use a semicolon at the end of the command.
s = minibatchpredict(net,img1)

#Assignment5 To get the list of potential classes, add a second output argument from imagePretrainedNetwork.
[net,classNames] = imagePretrainedNetwork
任务Add a second output to the code from task one to get the names of classes. Name the variable classes.
To see the list of names, don't use a semicolon at the end of the command.
[net,classes] = imagePretrainedNetwork

# Assignment6 You can consider the class name with the highest score as the network's label for the image. You can get this label with the scores2label function.
label = scores2label(scores,classNames)
任务Save the class name with the highest prediction score to a variable named c.
c = scores2label(s,classes)

# Assignment 7 Using the functions you learned earlier in the previous tasks, add commands to the script so that it makes predictions of the content of the images in img2 and img3. 
Store the classes with the highest prediction score in variables called c2 and c3, respectively.
To see the class names, omit the semicolon.
s2 = minibatchpredict(net, img2)
c2= scores2label(s2,classes)

s3 = minibatchpredict(net, img3)
c3 = scores2label(s3,classes)

# Assignment 8: Some of the network's top predictions are incorrect. For example, the second image contains a cat, yet the network classifies it as the dog breed toy terrier.
Different pretrained networks can have different behavior, so you can try importing another network by specifying a network name to imagePretrainedNetwork. 
[n,c] = imagePretrainedNetwork("name")
任务
Add an input to the command from task 1. Use the network name "googlenet" to import GoogLeNet.
[net, classes] = imagePretrainedNetwork('googlenet')

[if we want to use deep learning on MATLAB, we need to open Deep Network Designer]

# What is CNN(convultion neural netwrok)? 
CNN is made of layers, information is passed between those layers. Also, CNNs are specialized neural networks designed for inputs with a 
two-dimensional structure, such as images. 
# Pretrained model 
The bulk of the network turns into the input image. The type/order chosen by the architect.
If we use deep learning to load a bunch of images, we need to use a datastore. CNNs in MATLAB can make predictions on entire collections of images using datastores. 
A datastore is a MATLAB variable that acts as a reference to a data source, 
such as a folder of image files.

A network can make prediction on a whole collection of images by providing a datastore. ( we do not have to import data manually) 

Preprocessing each image individually can be time consuming. To use an image datastore, you also need to save the processed images to a folder. 
For large data sets, saving a duplicate of your files can take up a lot of space.
Preprocessing each image individually can be time consuming. To use an image datastore, you also need to save the processed images to a folder. 
For large data sets, saving a duplicate of your files can take up a lot of space.You can perform basic preprocessing with the augmentedImageDatastore function, 
which takes an image datastore and an image size as inputs. 
You can use the datastore as input to the minibatchpredict function.

## Assignnent1: An augmented image datastore can perform simple preprocessing steps on an entire collection of images. To create this datastore, use the augmentedImageDatastore function. The following code will resize all images in the specified image datastore to have M rows and N columns:
auds = augmentedImageDatastore([M N],imds)
任务
Create an augmented image datastore from imds that resizes the images to 224-by-224. Name the new datastore auds.
auds = augmentedImageDatastore([224 224],imds)

# Assignment2: You can use the augmented image datastore as an input to the minibatchpredict function. 
Before each image is classified, the datastore processes it using the methods that you specified when you created the datastore.
任务
Classify the images in auds using the minibatchpredict and scores2label functions with the network stored in net. Store the classes in a variable called preds.
scores = minibatchpredict(net, auds)
preds = scores2label(scores,classes)





