# This file is note for creating and classify the datastore

This code displays the images in the current folder and imports GoogLeNet.
ls *.jpg
[net,classes] = imagePretrainedNetwork("googlenet");

# Assignment1: You can use the imageDatastore function to create a datastore in MATLAB, specifying the folder or file names as the input. 
You can use wildcard characters such as * to specify multiple files.
This command creates a datastore from all the PNG files in the current folder.
ds = imageDatastore("*.png")
任务 Create a datastore called imds that refers to the image files with the *.jpg extension in the current folder.

imds = imageDatastore('*.jpg')

# Assignment2: The properties of the datastore contain the metadata about the data files. You can use dot notation to access the properties values.
val = ds.Property
任务 Use the Files property of imds to get the file names of the images. Store the result in a variable called fname.
fname = imds.Files

# Assignment3: You can manually import data from a datastore using the read, readimage, and readall functions.
read imports one image at a time, in order
readimage imports a single image
readall imports all the images into a cell array, with each image in a separate cell

This readimage command imports the nth image of the ds datastore into an array called I.
I = readimage(ds,n)
任务Use the readimage function to import the image in file07 (the seventh file in the datastore). Store the imported image in a variable called img. 
Then display img with the imshow function.

img = readimage(imds,7)
imshow(img)

# Assignment4: You can make predictions for each image in an image datastore with the minibatchpredict function.
preds = minibatchpredict(net,ds)
The result is a matrix of predicted scores, one row for each image in the datastore, and one column for each possible class.
任务
Use GoogLeNet (loaded as the variable net) to make predictions for the entire collection of images. Store the results in a variable called scores.

scores =  minibatchpredict(net,imds)

# Assignment5: Use the scores2label function to get the class names with the highest score from the variable scores. 
The names of the classes are already in the workspace in the variable classes. Store the result in a variable named preds.
preds = scores2label(scores, classes)


### Manage collection of images
Adjust input image:
This code imports and displays the image from the file file01.jpg.
img = imread("file01.jpg");
imshow(img)

[net,classes] = imagePretrainedNetwork("googlenet");

# Assignment1: Use the size function to view the size of the image img. Save the result to a variable called sz.
sz = size(img)

# Assignment2: The input layer of a network specifies the image size that the network requires. To see the input size, you can display a summary of your network.
summary(net)
任务
Display a summary of the network net in the script.

summary(net) 

# Assignment3: You can use the imresize function to resize an image to match the expected input size.

This command resizes img to M-by-N. That is, the output has a height of M pixels and a width of N pixels.
imgresz = imresize(img,[M N]);
任务
Use the imresize function to resize the image stored in the img variable to 224-by-224. Store the result back in the img variable. Then, display the resized image with imshow.
 img = imresize(img,[244 244]);
 imshow(img)














